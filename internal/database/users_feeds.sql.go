// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users_feeds.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
INSERT INTO users_feeds (id, user_id, feed_id, created_at)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, feed_id, created_at
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	FeedID    uuid.UUID
	CreatedAt time.Time
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (UsersFeed, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.UserID,
		arg.FeedID,
		arg.CreatedAt,
	)
	var i UsersFeed
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FeedID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFeedFollow = `-- name: DeleteFeedFollow :exec
DELETE FROM users_feeds
WHERE id = $1
`

func (q *Queries) DeleteFeedFollow(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollow, id)
	return err
}

const getUserFeedsFollow = `-- name: GetUserFeedsFollow :many
SELECT
    feeds.id AS feed_id,
    feeds.created_at AS feed_created_at,
    feeds.updated_at AS feed_updated_at,
    feeds.name AS feed_name,
    feeds.url AS feed_url,
    feeds.user_id AS feed_user_id,
    users_feeds.id AS feed_follow_id,
    users_feeds.created_at AS feed_follow_at 
FROM users_feeds JOIN feeds 
ON users_feeds.feed_id = feeds.id
WHERE users_feeds.user_id = $1
`

type GetUserFeedsFollowRow struct {
	FeedID        uuid.UUID
	FeedCreatedAt time.Time
	FeedUpdatedAt time.Time
	FeedName      string
	FeedUrl       string
	FeedUserID    uuid.UUID
	FeedFollowID  uuid.UUID
	FeedFollowAt  time.Time
}

func (q *Queries) GetUserFeedsFollow(ctx context.Context, userID uuid.UUID) ([]GetUserFeedsFollowRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserFeedsFollow, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserFeedsFollowRow
	for rows.Next() {
		var i GetUserFeedsFollowRow
		if err := rows.Scan(
			&i.FeedID,
			&i.FeedCreatedAt,
			&i.FeedUpdatedAt,
			&i.FeedName,
			&i.FeedUrl,
			&i.FeedUserID,
			&i.FeedFollowID,
			&i.FeedFollowAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
